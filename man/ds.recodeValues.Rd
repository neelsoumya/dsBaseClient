% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ds.recodeValues.R
\name{ds.recodeValues}
\alias{ds.recodeValues}
\title{Recodes server-side variable values}
\usage{
ds.recodeValues(
  var.name = NULL,
  values2replace.vector = NULL,
  new.values.vector = NULL,
  force.output.format = "no",
  newobj = NULL,
  datasources = NULL,
  notify.of.progress = FALSE
)
}
\arguments{
\item{var.name}{a character string providing the name of the variable to be recoded.}

\item{values2replace.vector}{a numeric or character vector specifying the values
in the variable \code{var.name} to be replaced.}

\item{new.values.vector}{a numeric or character vector specifying the new values.}

\item{force.output.format}{a character string specifying the format of the output variable. 
This can be set as \code{"numeric"}, \code{"character"} or \code{"no"}. Default \code{"no"}.  
For more information see \strong{Details}.}

\item{newobj}{a character string that provides the name for the output object
that is stored on the data servers.
Default \code{recodevalues.newobj}.}

\item{datasources}{a list of \code{\link{DSConnection-class}} 
objects obtained after login. If the \code{datasources} argument is not specified
the default set of connections will be used: see \code{\link{datashield.connections_default}}.}

\item{notify.of.progress}{logical. If TRUE console output should be produced to indicate
progress. Default FALSE.}
}
\value{
\code{ds.recodeValues} returns to the server-side the new variable with the recode values. 
Also, two validity messages are returned to the client-side 
indicating whether the new object  has been created in each data source and if so whether
it is in a valid form.
}
\description{
This function takes specified values of elements in a vector and converts
them to a matched set of alternative specified values.
}
\details{
This function recodes individual values with new individual values. This can
apply to numeric values, character values and NAs. 

One particular use of
\code{ds.recodeValues} is to convert NAs to an explicit value or vice-versa.

The argument \code{force.output.format} can be specified in 3 ways: \cr
(1) \code{force.output.format = "numeric"} the output 
vector will be of type numeric and any non-numeric values in 
\code{new.values.vector} will appear as \code{NaN} in the recoded vector.\cr
(2) \code{force.output.format = "character"}  all values
in the output vector will be in character format. \cr
(3) \code{force.output.format = "no"} 
if the vector identified by the \code{values2replace.vector} argument is itself
numeric and if all values in the \code{new.values.vector} are numeric,
the recoded output vector will also be numeric. Otherwise, it will be coerced
to character format.

Server functions called: \code{recodeValuesDS1} and \code{recodeValuesDS2}
}
\examples{
\dontrun{

  ## Version 6, for version 5 see the Wiki
  
  # connecting to the Opal servers

  require('DSI')
  require('DSOpal')
  require('dsBaseClient')

  builder <- DSI::newDSLoginBuilder()
  builder$append(server = "study1", 
                 url = "http://192.168.56.100:8080/", 
                 user = "administrator", password = "datashield_test&", 
                 table = "CNSIM.CNSIM1", driver = "OpalDriver")
  builder$append(server = "study2", 
                 url = "http://192.168.56.100:8080/", 
                 user = "administrator", password = "datashield_test&", 
                 table = "CNSIM.CNSIM2", driver = "OpalDriver")
  builder$append(server = "study3",
                 url = "http://192.168.56.100:8080/", 
                 user = "administrator", password = "datashield_test&", 
                 table = "CNSIM.CNSIM3", driver = "OpalDriver")
  logindata <- builder$build()
  
  connections <- DSI::datashield.login(logins = logindata, assign = TRUE, symbol = "D") 
  
  #Create a vector in the server-side
  
  ds.assign(toAssign = "D$LAB_TSC", 
            newobj = "ss.vector", 
            datasources = connections)
  
  # Recode the values of the vector
  
  ds.recodeValues(var.name = "ss.vector",
                  values2replace.vector = c(0,NA),
                  new.values.vector = c(0,0),
                  force.output.format = "numeric",
                  newobj = "recode.vector",
                  datasources = connections,
                  notify.of.progress = FALSE)
                 
  # Clear the Datashield R sessions and logout                 
  datashield.logout(connections) 
  
}   
}
\author{
DataSHIELD Development Team
}
